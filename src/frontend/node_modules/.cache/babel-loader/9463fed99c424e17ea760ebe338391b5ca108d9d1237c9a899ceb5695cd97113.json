{"ast":null,"code":"var _jsxFileName = \"E:\\\\lastlast\\\\src\\\\frontend\\\\src\\\\QRScan.tsx\",\n  _s = $RefreshSig$();\nimport { BarcodeFormat, BrowserMultiFormatReader, DecodeHintType } from \"@zxing/library\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reader = () => {\n  _s();\n  const [localStream, setLocalStream] = useState();\n  const Camera = useRef(null);\n  const hints = new Map();\n  const formats = [BarcodeFormat.QR_CODE, BarcodeFormat.DATA_MATRIX, BarcodeFormat.CODE_128, BarcodeFormat.CODABAR, BarcodeFormat.EAN_13, BarcodeFormat.EAN_8, BarcodeFormat.CODE_39, BarcodeFormat.CODE_93];\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n  const Scan = new BrowserMultiFormatReader(hints, 500);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"user\"\n      } //전면\n      // video: { facingMode: { exact: \"environment\" } }, //후면\n    }).then(stream => {\n      console.log(stream);\n      setLocalStream(stream);\n    });\n    return () => {\n      Stop();\n    };\n  }, []);\n  useEffect(() => {\n    if (!Camera.current) return;\n    if (localStream && Camera.current) {\n      Scanning();\n    }\n    return () => {\n      Stop();\n    };\n  }, [localStream]);\n  const req = useRef();\n  const Scanning = async () => {\n    // const t = await Scan.decodeOnce();\n    console.log(\"scan\");\n    if (localStream && Camera.current) {\n      try {\n        const data = await Scan.decodeFromStream(localStream, Camera.current, (data, err) => {\n          if (data) {\n            setText(data.getText());\n            // Scan.stopContinuousDecode();\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n  const Stop = () => {\n    if (localStream) {\n      const vidTrack = localStream.getVideoTracks();\n      vidTrack.forEach(track => {\n        localStream.removeTrack(track);\n      });\n    }\n  };\n  const [text, setText] = useState(\"\");\n  const sendTextToBackend = () => {\n    if (localStream) {\n      const vidTrack = localStream.getVideoTracks();\n      vidTrack.forEach(track => {\n        localStream.removeTrack(track);\n      });\n    }\n    // Here you can make a fetch request to send the text to the backend API\n    fetch(\"/api/meetings/scan-qr\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(text) // Assuming your backend expects the text in JSON format\n    }).then(response => {\n      if (response.ok) {\n        alert(\"출석이 완료되었습니다.\");\n      } else {\n        console.error(\"Failed to send text\");\n        alert(\"만료된 코드입니다.\");\n      }\n    }).catch(error => {\n      console.error(\"Error sending text:\", error);\n      alert(\"만료된 코드입니다.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: Camera,\n      id: \"video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendTextToBackend,\n      children: \"\\uC804\\uC1A1\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Reader, \"ZH/+IXJM/k/9xyXa003RhTLc8Mo=\");\n_c = Reader;\nexport default Reader;\nvar _c;\n$RefreshReg$(_c, \"Reader\");","map":{"version":3,"names":["BarcodeFormat","BrowserMultiFormatReader","DecodeHintType","useEffect","useRef","useState","jsxDEV","_jsxDEV","Reader","_s","localStream","setLocalStream","Camera","hints","Map","formats","QR_CODE","DATA_MATRIX","CODE_128","CODABAR","EAN_13","EAN_8","CODE_39","CODE_93","set","POSSIBLE_FORMATS","Scan","navigator","mediaDevices","getUserMedia","video","facingMode","then","stream","console","log","Stop","current","Scanning","req","data","decodeFromStream","err","setText","getText","error","vidTrack","getVideoTracks","forEach","track","removeTrack","text","sendTextToBackend","fetch","method","headers","body","JSON","stringify","response","ok","alert","catch","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/lastlast/src/frontend/src/QRScan.tsx"],"sourcesContent":["import {\n  BarcodeFormat,\n  BrowserMultiFormatReader,\n  DecodeHintType,\n} from \"@zxing/library\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst Reader = () => {\n  const [localStream, setLocalStream] = useState<MediaStream>();\n  const Camera = useRef<HTMLVideoElement>(null);\n  const hints = new Map();\n  const formats = [\n    BarcodeFormat.QR_CODE,\n    BarcodeFormat.DATA_MATRIX,\n    BarcodeFormat.CODE_128,\n    BarcodeFormat.CODABAR,\n    BarcodeFormat.EAN_13,\n    BarcodeFormat.EAN_8,\n    BarcodeFormat.CODE_39,\n    BarcodeFormat.CODE_93,\n  ];\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n  const Scan = new BrowserMultiFormatReader(hints, 500);\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: { facingMode: \"user\" }, //전면\n        // video: { facingMode: { exact: \"environment\" } }, //후면\n      })\n      .then((stream) => {\n        console.log(stream);\n        setLocalStream(stream);\n      });\n    return () => {\n      Stop();\n    };\n  }, []);\n  useEffect(() => {\n    if (!Camera.current) return;\n    if (localStream && Camera.current) {\n      Scanning();\n    }\n    return () => {\n      Stop();\n    };\n  }, [localStream]);\n  const req = useRef<any>();\n  const Scanning = async () => {\n    // const t = await Scan.decodeOnce();\n    console.log(\"scan\");\n    if (localStream && Camera.current) {\n      try {\n        const data = await Scan.decodeFromStream(\n          localStream,\n          Camera.current,\n          (data, err) => {\n            if (data) {\n              setText(data.getText());\n              // Scan.stopContinuousDecode();\n            }\n          }\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n  const Stop = () => {\n    if (localStream) {\n      const vidTrack = localStream.getVideoTracks();\n      vidTrack.forEach((track) => {\n        localStream.removeTrack(track);\n      });\n    }\n  };\n  const [text, setText] = useState(\"\");\n  const sendTextToBackend = () => {\n    if (localStream) {\n      const vidTrack = localStream.getVideoTracks();\n      vidTrack.forEach((track) => {\n        localStream.removeTrack(track);\n      });\n    }\n    // Here you can make a fetch request to send the text to the backend API\n    fetch(\"/api/meetings/scan-qr\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify( text ), // Assuming your backend expects the text in JSON format\n    })\n      .then((response) => {\n        if (response.ok) {\n          alert(\"출석이 완료되었습니다.\");\n        } else {\n          console.error(\"Failed to send text\");\n          alert(\"만료된 코드입니다.\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error sending text:\", error);\n        alert(\"만료된 코드입니다.\");\n      });\n  };\n\n  return (\n    <div>\n      <video ref={Camera} id=\"video\" />\n      <span>{text}</span>\n      <button onClick={sendTextToBackend}>전송하기</button>\n    </div>\n  );\n};\nexport default Reader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}